Tanks - multiplayer

---------------------------------------------------------------------------------------------------------------------

Autor: Grzegorz Klimek Gr. Lab. 4 rok II IS WIMIiP

---------------------------------------------------------------------------------------------------------------------

Opis projektu: 

Projekt ten przewiduje stworzenie gry, w której u¿ytkownicy bêd¹ siê rejestrowaæ w bazie danych, 
podaj¹c tzw. nick gracza. PóŸniej musz¹ siê zalogowaæ - bez tego niemo¿liwe jest do³¹czenie do gry.
Statystyki wszystkich zarejestrowanych u¿ytkowników bêd¹ dostêpne w menu.
Nastêpnie taki u¿ytkownik mo¿e wejœæ do gry dostaj¹c do dyspozycji czo³g wygenerowany na mapie. 
Gracz porusza siê czo³giem a jego zadanie polega na zniszczeniu wrogich czo³gów(innych graczy, którzy 
po³¹cz¹ sie z serwerem i wejd¹ do gry).

---------------------------------------------------------------------------------------------------------------------

Harmonogram:


1. Okienka tworzone przy pomocy biblioteki graficznej Swing

[1.1] Stworzenie klasy obs³uguj¹cej g³ówne okno programu (klasa GUI)

	-> stworzenie okna, odpowiednie ustawienie go na ekranie, nazwanie itp.
	-> stworzenie panelu odpowiedzialnego za ustawienie t³a aplikacji (klasa MyPanel)
	-> ustawienie icona okna aplikacji

[1.2] Tworzenie GUI + oprogramowanie przycisków

	-> utworzenie menu g³ównego aplikacji wraz z menu pobocznymi
	-> stworzenie buttonów, napisów, buttonów wyboru, textfieldów
	-> dzia³anie bez koniecznoœci otwierania nowych okien - wszystko w jednym oknie
	-> dodanie akcji do przycisków po klikniêciu mysz¹

[1.3] Wygenerowanie mapy oraz stworzenie modelu czo³gu + oprogramowanie go

	-> stworzenie mapy przy pomocy odpowiedniej klasy (klasa MapPanel)
	-> dodanie belki na górze mapy z informacj¹ o aktualnym ¿yciu, iloœci zniszczonych czo³gów i bycia zniszczonym
	-> stworzenie czo³gu przy pomocy odpowiedniej klasy (klasa Tank)
	-> losowe generowanie czo³gu na mapie
	-> sterowanie czo³giem - reakcja na klawisze
	-> strzelanie czo³giem

[1.4] Stworzenie dodatkowych okien interfejsu

	-> utworzenie interfejsu serwera

[1.5] Wygl¹d i zachowanie przeciwnych czo³gów

    -> prawid³owe zachowanie siê czo³gu czyli obracanie siê (animacja), kierunek strza³u
    -> poprawna fizyka gry
	-> mechanika zwi¹zana z otrzymywanymi obra¿eniami
	-> zachowanie czo³gów - utrata zdrowia, sprawdzanie czy zosta³ zniszczony, jeœli tak to usuwanie go z mapy

---------------------------------------------------------------------------------------------------------------------

2. Zapis i odczyt plików

[2.1] Zapis do pliku wszystkich zarejestrowanych u¿ytkowników
	
	-> forma listy:

		LICZBA GRACZY: ...
		1) Greg
		2) Stefan
		...

[2.2] Zapis do pliku statystyk konkretnego gracza
	
	-> forma listy:

		Moje Statystyki:
		GRACZ: login
		Liczba zniszczonych czo³gów: ...
		Zosta³eœ zniszczony : ... razy
		
[2.3] Plik z logami klienta (klient)

[2.4] Plik z logami serwera (serwer)

---------------------------------------------------------------------------------------------------------------------

3. Wspó³bie¿noœæ: w¹tki, operacje atomowe, itp.

[3.1] Utworzenie g³ównego w¹tku programu

	-> obs³uga zapisu do pliku

[3.2] Utworzenie w¹tku licz¹cego zniszczone czo³gi i bycie zniszczonym

[3.3] Ruch gracza + kolizje

[3.4] Utworzenie w¹tku serwera

---------------------------------------------------------------------------------------------------------------------

4. Bazy danych: JDBC dla: MySQL

[4.1] Podstawowa konfiguracja JBDC

[4.2] Obs³uga bazy danych (aplikacja serwera)

	-> ³¹czenie z baz¹ danych
	-> tworzenie tabel
	-> wstawianie danych do bazy
	-> wczytywanie danych z bazy do listy
	-> zamykanie po³¹czenia

[4.3] Utworzenie klasy DataToBase (aplikacja serwera)

	-> zbiór zmiennych przechowuj¹cych dane do zapisu/odczytu z bazy danych
	-> zbiór funkcji wczytuj¹cych wartoœci (get)
	-> zbiór funkcji wstawiaj¹cych wartoœci (set)
	-> funkcja wyœwietlaj¹ca

[4.4] Aktualizowanie bazy danych

---------------------------------------------------------------------------------------------------------------------

5. Komunikacja sieciowa poprzez sockety

[5.1] Aplikacja server

	-> oczekiwanie na po³¹czenie
	-> odbieranie informacji od klienta
	-> wykonanie operacji w zale¿noœci od flagi przekazanej przez g³ówn¹ aplikacjê.

[5.2] Aplikacja client

	-> ³¹czenie siê z serwerem
	-> wysy³anie komunikatów do serwera i oczekiwanie na odpowiedni¹ odpowiedŸ w zale¿noœci od wys³anej flagi.
	-> wykonanie odpowiedniej operacji w zale¿noœci od wys³anej informacji zwrotnej od serwera.

[5.3] Ustawienie po³¹czenia wielu klientów poprzez serwer

[5.4] Po³¹czenie za pomoc¹ adresu IP

---------------------------------------------------------------------------------------------------------------------

6. Zaproponowane przez studenta

[6.1] Wzorzec projektowy - singleton

[6.2] Grafika

	-> dodanie odpowiednich grafik zwi¹zanych z tematyk¹ gry
	-> utworzenie przejrzystego menu g³ównego aplikacji
	-> zmiana stylu buttonów na przyjemny dla wzroku
	
[6.3] Jêzyk interfejsu

	-> zmiana jêzyka w grze (Angielski lub Polski) wybierane w menu g³ównym w opcjach gry

[6.4] Po³¹czenie z zewnêtrzn¹ baz¹ danych

---------------------------------------------------------------------------------------------------------------------

[Legenda]

[1] - poruszane tematy
[1.1] - zadania
[->] - podzadania

---------------------------------------------------------------------------------------------------------------------