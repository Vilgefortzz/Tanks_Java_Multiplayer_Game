TANKS - MULTIPLAYER
---------------------------------------------------------------------------------------------------------------------

Autor: Grzegorz Klimek Gr. Lab. 4 rok II IS WIMIiP
---------------------------------------------------------------------------------------------------------------------

Opis projektu: 

Projekt ten przewiduje stworzenie gry, w której u¿ytkownicy bêd¹ siê rejestrowaæ w bazie danych, 
podaj¹c tzw. nick gracza. PóŸniej musz¹ siê zalogowaæ - bez tego niemo¿liwe jest do³¹czenie do gry.
Statystyki wszystkich zarejestrowanych u¿ytkowników bêd¹ dostêpne w menu.
Nastêpnie taki u¿ytkownik mo¿e wejœæ do gry dostaj¹c do dyspozycji czo³g wygenerowany na mapie. 
Gracz porusza siê czo³giem a jego zadanie polega na zniszczeniu wrogich czo³gów (innych graczy, którzy
po³¹cz¹ sie z serwerem i wejd¹ do gry).

---------------------------------------------------------------------------------------------------------------------

Harmonogram:


1. Okienka tworzone przy pomocy biblioteki graficznej Swing

[1.1] Stworzenie klasy obs³uguj¹cej g³ówne okno programu (klasa GUI)

	-> stworzenie okna, odpowiednie ustawienie go na ekranie, nazwanie itp.
	-> stworzenie panelu odpowiedzialnego za ustawienie t³a aplikacji (klasa MyPanel)
	-> ustawienie icona okna aplikacji

[1.2] Tworzenie GUI + oprogramowanie przycisków

	-> utworzenie menu g³ównego aplikacji wraz z menu pobocznymi
	-> stworzenie buttonów, napisów, buttonów wyboru, textfieldów
	-> dzia³anie bez koniecznoœci otwierania nowych okien - wszystko w jednym oknie
	-> dodanie akcji do przycisków po klikniêciu mysz¹

[1.3] Wygenerowanie mapy oraz stworzenie modelu czo³gu + oprogramowanie go

	-> stworzenie mapy (tylko t³o) przy pomocy odpowiedniej klasy (klasa MapPanel)
	-> dodanie belki na górze mapy z informacj¹ o aktualnym ¿yciu, iloœci zniszczonych czo³gów i bycia zniszczonym
	-> stworzenie czo³gu przy pomocy odpowiedniej klasy (klasa Tank)
	-> sterowanie czo³giem - reakcja na klawisze
	-> strzelanie czo³giem - w jednym kierunku

[1.4] Stworzenie dodatkowych okien interfejsu

	-> utworzenie interfejsu serwera

[1.5] Animacje czo³gów

    -> prawid³owe zachowanie siê czo³gu czyli obracanie siê (animacja), kierunek strza³u
    -> losowe generowanie czo³gu na mapie

[1.6] Rozgrywka ( otrzymywanie obra¿eñ, strata zdrowia, usuwanie z mapy )

    -> poprawna fizyka gry
	-> mechanika zwi¹zana z otrzymywanymi obra¿eniami
	-> zachowanie czo³gów - utrata zdrowia, sprawdzanie czy zosta³ zniszczony, jeœli tak to usuwanie go z mapy

---------------------------------------------------------------------------------------------------------------------

2. Zapis i odczyt plików

[2.1] Zapisywanie i odpisywanie konfiguracji

    -> na jakim porcie jest rozgrywka, ile czo³gów, u¿ytkownik który ³¹czy sie na serwerze
    -> konfiguracja serwera i klienta

[2.2] Wczytywanie mapy
		
[2.3] Plik z logami klienta i serwera (klasa do obs³ugi logów z przed 2 tygodni np.)

[2.4] Zapis i wczytywanie stanu gry

---------------------------------------------------------------------------------------------------------------------

3. Wspó³bie¿noœæ: w¹tki, operacje atomowe, itp.

[3.1] Mechanizm bezpiecznego rozg³aszania komunikatów miêdzy u¿ytkownikami

[3.2] Ruch gracza + kolizje (w¹tek animacji)

[3.4] Utworzenie w¹tku serwera(akceptuj¹cy) + w¹tki dla ka¿dego klienta + mechanizm bezpiecznego zatrzymywania w¹tku(join, flagi podtrzymuj¹ce)

[3.5] W¹tek do ka¿dego klienta (synchronizowanie obiektów i bezpieczne przerwania)

---------------------------------------------------------------------------------------------------------------------

4. Bazy danych: JDBC dla: MySQL

[4.1] Zaprojektowanie bazy danych u¿ytkowników, po³¹czenie z baz¹ za pomoc¹ JDBC(min. 3 tabele)

    -> ³¹czenie z baz¹ danych
    -> wstawianie danych do bazy
    -> wczytywanie danych z bazy do listy
    -> zamykanie po³¹czenia

[4.2] Mechanizm walidacji (regexy - java regexy + si³a has³a)

[4.3] Logika autoryzacji

    -> logowanie
    -> rejestracja

[4.4] Mechanizm obs³ugi statystyk (raport - w ci¹gu ostatniego miesi¹ca jakiœ tam uzytkownik mia³ jakieœ tam statystyki)

---------------------------------------------------------------------------------------------------------------------

5. Komunikacja sieciowa poprzez sockety

[5.1] Aplikacja server

	-> oczekiwanie na po³¹czenie
	-> odbieranie informacji od klienta
	-> wykonanie operacji w zale¿noœci od flagi przekazanej przez g³ówn¹ aplikacjê.

[5.2] Aplikacja client

	-> ³¹czenie siê z serwerem
	-> wysy³anie komunikatów do serwera i oczekiwanie na odpowiedni¹ odpowiedŸ w zale¿noœci od wys³anej flagi.
	-> wykonanie odpowiedniej operacji w zale¿noœci od wys³anej informacji zwrotnej od serwera.

[5.3] Ustawienie po³¹czenia wielu klientów poprzez serwer??

[5.4] Protokó³ komunikacji DataInputStream, DataOutputStream

---------------------------------------------------------------------------------------------------------------------

6. Zaproponowane przez studenta

[6.1] Logika rozgrywki, kolizje, timer bêdzie u¿ywa³ w¹tku animacji

[6.2] Tryb teamMatch + obs³uga pocisków

[6.2] Grafika

	-> dodanie odpowiednich grafik zwi¹zanych z tematyk¹ gry
	-> utworzenie przejrzystego menu g³ównego aplikacji
	-> zmiana stylu buttonów na przyjemny dla wzroku

---------------------------------------------------------------------------------------------------------------------

[Legenda]

[1] - poruszane tematy
[1.1] - zadania
[->] - podzadania

---------------------------------------------------------------------------------------------------------------------